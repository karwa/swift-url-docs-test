{"abstract":[{"text":"Merges segments of consecutive equal elements.","type":"text"}],"variants":[{"paths":["\/documentation\/unicodedatastructures\/segmentedline\/combinesegments()"],"traits":[{"interfaceLanguage":"swift"}]}],"primaryContentSections":[{"declarations":[{"tokens":[{"text":"mutating","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"combineSegments","kind":"identifier"},{"text":"()","kind":"text"}],"platforms":["Linux"],"languages":["swift"]}],"kind":"declarations"},{"content":[{"level":2,"anchor":"discussion","text":"Discussion","type":"heading"},{"inlineContent":[{"type":"text","text":"This function can be particularly effective at simplifying lines with lots of segments, as by mapping"},{"type":"text","text":" "},{"type":"text","text":"complex values to simplified ones (for example, mapping to an "},{"code":"enum","type":"codeVoice"},{"type":"text","text":" with fewer cases) using "},{"isActive":true,"identifier":"doc:\/\/com.karwa.WebURL\/documentation\/UnicodeDataStructures\/SegmentedLine\/mapValues(_:)","type":"reference"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"we can discard information that isn’t needed. This can lead to adjacent segments containing the same value"},{"type":"text","text":" "},{"type":"text","text":"more often - segments which can then be combined by this function."}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["\/\/ ℹ️ Imagine we have a complex SegmentedLine with lots of small segments","\/\/    capturing granular details, and we'd like to simplify it.","","enum ComplexData {","  case categoryA, categoryB, categoryC \/\/ ...","}","let complexLine: SegmentedLine<Int, ComplexData> = \/\/ ...","print(complexLine)","\/\/ | [0..<2]: categoryA | [2..<4]: categoryB | [4..<12]: categoryC | ...","","\/\/ 1️⃣ Perhaps we can map these to a smaller number of states.","","enum SimplifiedData {","  case valid, invalid","}","var simplifiedLine = complexLine.mapValues { complex in","  SimplifiedData(validating: complex)","}","print(simplifiedLine)","\/\/ | [0..<2]: valid | [2..<4]: valid | [4..<12]: valid | ...","","\/\/ 2️⃣ Notice that we have lots of segments for boundaries which","\/\/    which are no longer important. 'combineSegments' can clean them up.","","simplifiedLine.combineSegments()","print(simplifiedLine)","\/\/ | [0..<2000]: valid | [2000..<2024]: invalid | [2024..<2056]: valid | ..."]}],"kind":"content"}],"kind":"symbol","schemaVersion":{"patch":0,"minor":3,"major":0},"identifier":{"url":"doc:\/\/com.karwa.WebURL\/documentation\/UnicodeDataStructures\/SegmentedLine\/combineSegments()","interfaceLanguage":"swift"},"sections":[],"metadata":{"roleHeading":"Instance Method","conformance":{"constraints":[{"code":"Bound","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"Comparable","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"Value","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"Equatable","type":"codeVoice"},{"text":".","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}]},"role":"symbol","modules":[{"name":"UnicodeDataStructures"}],"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"combineSegments"},{"kind":"text","text":"()"}],"extendedModule":"UnicodeDataStructures","externalID":"s:21UnicodeDataStructures13SegmentedLineVAASQR_rlE15combineSegmentsyyF","title":"combineSegments()","symbolKind":"method"},"hierarchy":{"paths":[["doc:\/\/com.karwa.WebURL\/documentation\/UnicodeDataStructures","doc:\/\/com.karwa.WebURL\/documentation\/UnicodeDataStructures\/SegmentedLine"]]},"references":{"doc://com.karwa.WebURL/documentation/UnicodeDataStructures":{"kind":"symbol","identifier":"doc:\/\/com.karwa.WebURL\/documentation\/UnicodeDataStructures","role":"collection","title":"UnicodeDataStructures","abstract":[],"url":"\/documentation\/unicodedatastructures","type":"topic"},"doc://com.karwa.WebURL/documentation/UnicodeDataStructures/SegmentedLine/mapValues(_:)":{"abstract":[{"type":"text","text":"Returns a new "},{"code":"SegmentedLine","type":"codeVoice"},{"text":", created by transforming this line’s values using the given closure.","type":"text"}],"kind":"symbol","conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}],"constraints":[{"code":"Bound","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"Comparable","type":"codeVoice"},{"text":".","type":"text"}]},"identifier":"doc:\/\/com.karwa.WebURL\/documentation\/UnicodeDataStructures\/SegmentedLine\/mapValues(_:)","title":"mapValues(_:)","role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"mapValues"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">(("},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":") "},{"kind":"keyword","text":"rethrows"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"SegmentedLine","preciseIdentifier":"s:21UnicodeDataStructures13SegmentedLineV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Bound"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":">"}],"url":"\/documentation\/unicodedatastructures\/segmentedline\/mapvalues(_:)"},"doc://com.karwa.WebURL/documentation/UnicodeDataStructures/SegmentedLine/combineSegments()":{"abstract":[{"type":"text","text":"Merges segments of consecutive equal elements."}],"kind":"symbol","conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"code":"Bound","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"Comparable","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"Value","type":"codeVoice"},{"type":"text","text":" conforms to "},{"code":"Equatable","type":"codeVoice"},{"type":"text","text":"."}]},"identifier":"doc:\/\/com.karwa.WebURL\/documentation\/UnicodeDataStructures\/SegmentedLine\/combineSegments()","title":"combineSegments()","role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"combineSegments"},{"kind":"text","text":"()"}],"url":"\/documentation\/unicodedatastructures\/segmentedline\/combinesegments()"},"doc://com.karwa.WebURL/documentation/UnicodeDataStructures/SegmentedLine":{"navigatorTitle":[{"kind":"identifier","text":"SegmentedLine"}],"kind":"symbol","identifier":"doc:\/\/com.karwa.WebURL\/documentation\/UnicodeDataStructures\/SegmentedLine","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"SegmentedLine"}],"role":"symbol","title":"SegmentedLine","abstract":[{"type":"text","text":"A "},{"code":"SegmentedLine","type":"codeVoice"},{"type":"text","text":" is a one-dimensional space, where every location is assigned a value."}],"url":"\/documentation\/unicodedatastructures\/segmentedline","type":"topic"}}}