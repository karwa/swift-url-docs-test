{"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.karwa.WebURL\/documentation\/UnicodeDataStructures\/SegmentedLine\/combineSegments(while:)"},"kind":"symbol","hierarchy":{"paths":[["doc:\/\/com.karwa.WebURL\/documentation\/UnicodeDataStructures","doc:\/\/com.karwa.WebURL\/documentation\/UnicodeDataStructures\/SegmentedLine"]]},"abstract":[{"text":"Merges segments according to the given closure.","type":"text"}],"metadata":{"symbolKind":"method","extendedModule":"UnicodeDataStructures","role":"symbol","modules":[{"name":"UnicodeDataStructures"}],"title":"combineSegments(while:)","roleHeading":"Instance Method","externalID":"s:21UnicodeDataStructures13SegmentedLineV15combineSegments5whileySbSnyxG5range_q_5valuetz_AfG_q_AHttXE_tF","conformance":{"constraints":[{"code":"Bound","type":"codeVoice"},{"type":"text","text":" conforms to "},{"code":"Comparable","type":"codeVoice"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"combineSegments"},{"kind":"text","text":"("},{"kind":"externalParam","text":"while"},{"kind":"text","text":": ("},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"SegmentedLine","preciseIdentifier":"s:21UnicodeDataStructures13SegmentedLineV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Bound"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Value"},{"text":">.","kind":"text"},{"preciseIdentifier":"s:21UnicodeDataStructures13SegmentedLineV8SegmentsV","text":"Segments","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:21UnicodeDataStructures13SegmentedLineV8SegmentsV7Elementa","text":"Element","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"preciseIdentifier":"s:21UnicodeDataStructures13SegmentedLineV","text":"SegmentedLine","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Bound","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":">.","kind":"text"},{"text":"Segments","kind":"typeIdentifier","preciseIdentifier":"s:21UnicodeDataStructures13SegmentedLineV8SegmentsV"},{"text":".","kind":"text"},{"text":"Element","kind":"typeIdentifier","preciseIdentifier":"s:21UnicodeDataStructures13SegmentedLineV8SegmentsV7Elementa"},{"text":") -> ","kind":"text"},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"},{"text":")","kind":"text"}]},"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["Linux"],"languages":["swift"],"tokens":[{"text":"mutating","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"combineSegments","kind":"identifier"},{"text":"(","kind":"text"},{"text":"while","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"shouldMerge","kind":"internalParam"},{"text":": (","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"identifier":"doc:\/\/com.karwa.WebURL\/documentation\/UnicodeDataStructures\/SegmentedLine","preciseIdentifier":"s:21UnicodeDataStructures13SegmentedLineV","text":"SegmentedLine","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Bound","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":">.","kind":"text"},{"identifier":"doc:\/\/com.karwa.WebURL\/documentation\/UnicodeDataStructures\/SegmentedLine\/Segments-swift.struct","preciseIdentifier":"s:21UnicodeDataStructures13SegmentedLineV8SegmentsV","text":"Segments","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:21UnicodeDataStructures13SegmentedLineV8SegmentsV7Elementa","text":"Element","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"identifier":"doc:\/\/com.karwa.WebURL\/documentation\/UnicodeDataStructures\/SegmentedLine","preciseIdentifier":"s:21UnicodeDataStructures13SegmentedLineV","text":"SegmentedLine","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Bound","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":">.","kind":"text"},{"identifier":"doc:\/\/com.karwa.WebURL\/documentation\/UnicodeDataStructures\/SegmentedLine\/Segments-swift.struct","preciseIdentifier":"s:21UnicodeDataStructures13SegmentedLineV8SegmentsV","text":"Segments","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:21UnicodeDataStructures13SegmentedLineV8SegmentsV7Elementa","text":"Element","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:Sb","text":"Bool","kind":"typeIdentifier"},{"text":")","kind":"text"}]}]},{"kind":"content","content":[{"level":2,"type":"heading","anchor":"discussion","text":"Discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This function implements a left-fold, similar to Collection’s "},{"type":"codeVoice","code":"reduce"},{"type":"text","text":", except that the folding closure"},{"type":"text","text":" "},{"type":"text","text":"can decide to preserve a segment break and reset the fold operation."}]},{"type":"paragraph","inlineContent":[{"text":"The closure is invoked with two segments as arguments - an ","type":"text"},{"code":"accumulator","type":"codeVoice"},{"text":", which has a mutable value,","type":"text"},{"text":" ","type":"text"},{"text":"and ","type":"text"},{"code":"next","type":"codeVoice"},{"text":", which is its successor on this line. Given these segments, the closure may decide:","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"To combine ","type":"text"},{"code":"next","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"accumulator","type":"codeVoice"},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"To fold segments, the closure performs any required adjustments to merge ","type":"text"},{"code":"next.value","type":"codeVoice"},{"text":" ","type":"text"},{"text":"in to ","type":"text"},{"code":"accumulator.value","type":"codeVoice"},{"text":", and returns ","type":"text"},{"code":"true","type":"codeVoice"},{"text":". The segment ","type":"text"},{"code":"next","type":"codeVoice"},{"text":" will be discarded,","type":"text"},{"text":" ","type":"text"},{"text":"and the accumulator’s range will expand up to ","type":"text"},{"code":"next.range.upperBound","type":"codeVoice"},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Folding continues with the same accumulator for as long as the closure returns "},{"type":"codeVoice","code":"true"},{"type":"text","text":";"},{"type":"text","text":" "},{"type":"text","text":"this process is similar to Collection’s "},{"type":"codeVoice","code":"reduce(into:)"},{"type":"text","text":" function."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"To maintain the segment break."}],"type":"paragraph"},{"inlineContent":[{"text":"If it is not desirable to combine the segments, the closure may return ","type":"text"},{"type":"codeVoice","code":"false"},{"text":".","type":"text"},{"text":" ","type":"text"},{"text":"This finalizes the current accumulator, and restarts folding with ","type":"text"},{"type":"codeVoice","code":"next"},{"text":" as the new accumulator.","type":"text"}],"type":"paragraph"}]}]}]}],"sections":[],"schemaVersion":{"major":0,"minor":3,"patch":0},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/unicodedatastructures\/segmentedline\/combinesegments(while:)"]}],"references":{"doc://com.karwa.WebURL/documentation/UnicodeDataStructures/SegmentedLine/Segments-swift.struct":{"navigatorTitle":[{"kind":"identifier","text":"Segments"}],"kind":"symbol","identifier":"doc:\/\/com.karwa.WebURL\/documentation\/UnicodeDataStructures\/SegmentedLine\/Segments-swift.struct","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Segments"}],"role":"symbol","title":"SegmentedLine.Segments","abstract":[],"url":"\/documentation\/unicodedatastructures\/segmentedline\/segments-swift.struct","conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"constraints":[{"type":"codeVoice","code":"Bound"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Comparable"},{"text":".","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}]},"type":"topic"},"doc://com.karwa.WebURL/documentation/UnicodeDataStructures/SegmentedLine":{"navigatorTitle":[{"kind":"identifier","text":"SegmentedLine"}],"kind":"symbol","identifier":"doc:\/\/com.karwa.WebURL\/documentation\/UnicodeDataStructures\/SegmentedLine","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"SegmentedLine"}],"role":"symbol","title":"SegmentedLine","abstract":[{"type":"text","text":"A "},{"code":"SegmentedLine","type":"codeVoice"},{"type":"text","text":" is a one-dimensional space, where every location is assigned a value."}],"url":"\/documentation\/unicodedatastructures\/segmentedline","type":"topic"},"doc://com.karwa.WebURL/documentation/UnicodeDataStructures/SegmentedLine/combineSegments(while:)":{"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"combineSegments"},{"kind":"text","text":"("},{"kind":"externalParam","text":"while"},{"kind":"text","text":": ("},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"kind":"typeIdentifier","preciseIdentifier":"s:21UnicodeDataStructures13SegmentedLineV","text":"SegmentedLine"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Bound"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":">."},{"kind":"typeIdentifier","text":"Segments","preciseIdentifier":"s:21UnicodeDataStructures13SegmentedLineV8SegmentsV"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element","preciseIdentifier":"s:21UnicodeDataStructures13SegmentedLineV8SegmentsV7Elementa"},{"kind":"text","text":", "},{"preciseIdentifier":"s:21UnicodeDataStructures13SegmentedLineV","kind":"typeIdentifier","text":"SegmentedLine"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Bound"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Value"},{"text":">.","kind":"text"},{"preciseIdentifier":"s:21UnicodeDataStructures13SegmentedLineV8SegmentsV","text":"Segments","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:21UnicodeDataStructures13SegmentedLineV8SegmentsV7Elementa","text":"Element","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:Sb","text":"Bool","kind":"typeIdentifier"},{"text":")","kind":"text"}],"title":"combineSegments(while:)","identifier":"doc:\/\/com.karwa.WebURL\/documentation\/UnicodeDataStructures\/SegmentedLine\/combineSegments(while:)","kind":"symbol","abstract":[{"text":"Merges segments according to the given closure.","type":"text"}],"role":"symbol","type":"topic","url":"\/documentation\/unicodedatastructures\/segmentedline\/combinesegments(while:)","conformance":{"constraints":[{"code":"Bound","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"Comparable","type":"codeVoice"},{"text":".","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}]}},"doc://com.karwa.WebURL/documentation/UnicodeDataStructures":{"kind":"symbol","identifier":"doc:\/\/com.karwa.WebURL\/documentation\/UnicodeDataStructures","role":"collection","title":"UnicodeDataStructures","abstract":[],"url":"\/documentation\/unicodedatastructures","type":"topic"}}}