{"abstract":[{"text":"Returns a new ","type":"text"},{"type":"codeVoice","code":"SegmentedLine"},{"text":", created by transforming this line’s values using the given closure.","type":"text"}],"metadata":{"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"mapValues"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">(("},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":") "},{"kind":"keyword","text":"rethrows"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:21UnicodeDataStructures13SegmentedLineV","text":"SegmentedLine"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Bound"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":">"}],"roleHeading":"Instance Method","extendedModule":"UnicodeDataStructures","modules":[{"name":"UnicodeDataStructures"}],"externalID":"s:21UnicodeDataStructures13SegmentedLineV9mapValuesyACyxqd__Gqd__q_KXEKlF","conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}],"constraints":[{"code":"Bound","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"Comparable","type":"codeVoice"},{"text":".","type":"text"}]},"role":"symbol","symbolKind":"method","title":"mapValues(_:)"},"schemaVersion":{"minor":3,"patch":0,"major":0},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.karwa.WebURL\/documentation\/UnicodeDataStructures\/SegmentedLine\/mapValues(_:)"},"hierarchy":{"paths":[["doc:\/\/com.karwa.WebURL\/documentation\/UnicodeDataStructures","doc:\/\/com.karwa.WebURL\/documentation\/UnicodeDataStructures\/SegmentedLine"]]},"variants":[{"paths":["\/documentation\/unicodedatastructures\/segmentedline\/mapvalues(_:)"],"traits":[{"interfaceLanguage":"swift"}]}],"sections":[],"primaryContentSections":[{"declarations":[{"languages":["swift"],"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"mapValues"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"text":"_","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"transform","kind":"internalParam"},{"text":": (","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"rethrows","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"SegmentedLine","preciseIdentifier":"s:21UnicodeDataStructures13SegmentedLineV","kind":"typeIdentifier","identifier":"doc:\/\/com.karwa.WebURL\/documentation\/UnicodeDataStructures\/SegmentedLine"},{"text":"<","kind":"text"},{"text":"Bound","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":">","kind":"text"}],"platforms":["Linux"]}],"kind":"declarations"},{"content":[{"type":"heading","text":"Discussion","level":2,"anchor":"discussion"},{"type":"paragraph","inlineContent":[{"text":"The result will have the same bounds and number of segments as this line, at the same locations.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"This function can be particularly effective at simplifying lines with lots of segments, as by mapping","type":"text"},{"text":" ","type":"text"},{"text":"complex values to simplified ones (for example, mapping to an ","type":"text"},{"type":"codeVoice","code":"enum"},{"text":" with fewer cases), we can discard","type":"text"},{"type":"text","text":" "},{"type":"text","text":"information that isn’t needed. This can lead to adjacent segments containing the same value more often,"},{"type":"text","text":" "},{"type":"text","text":"to be combined by "},{"type":"reference","identifier":"doc:\/\/com.karwa.WebURL\/documentation\/UnicodeDataStructures\/SegmentedLine\/combineSegments()","isActive":true},{"type":"text","text":"."}]},{"type":"codeListing","syntax":"swift","code":["\/\/ ℹ️ Imagine we have a complex SegmentedLine with lots of small segments","\/\/    capturing granular details, and we'd like to simplify it.","","enum ComplexData {","  case categoryA, categoryB, categoryC \/\/ ...","}","let complexLine: SegmentedLine<Int, ComplexData> = \/\/ ...","print(complexLine)","\/\/ | [0..<2]: categoryA | [2..<4]: categoryB | [4..<12]: categoryC | ...","","\/\/ 1️⃣ Perhaps we can map these to a smaller number of states.","","enum SimplifiedData {","  case valid, invalid","}","var simplifiedLine = complexLine.mapValues { complex in","  SimplifiedData(validating: complex)","}","print(simplifiedLine)","\/\/ | [0..<2]: valid | [2..<4]: valid | [4..<12]: valid | ...","","\/\/ 2️⃣ Notice that we have lots of segments for boundaries which","\/\/    which are no longer important. 'combineSegments' can clean them up.","","simplifiedLine.combineSegments()","print(simplifiedLine)","\/\/ | [0..<2000]: valid | [2000..<2024]: invalid | [2024..<2056]: valid | ..."]}],"kind":"content"}],"kind":"symbol","references":{"doc://com.karwa.WebURL/documentation/UnicodeDataStructures/SegmentedLine/mapValues(_:)":{"abstract":[{"type":"text","text":"Returns a new "},{"code":"SegmentedLine","type":"codeVoice"},{"text":", created by transforming this line’s values using the given closure.","type":"text"}],"kind":"symbol","conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}],"constraints":[{"code":"Bound","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"Comparable","type":"codeVoice"},{"text":".","type":"text"}]},"identifier":"doc:\/\/com.karwa.WebURL\/documentation\/UnicodeDataStructures\/SegmentedLine\/mapValues(_:)","title":"mapValues(_:)","role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"mapValues"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">(("},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":") "},{"kind":"keyword","text":"rethrows"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"SegmentedLine","preciseIdentifier":"s:21UnicodeDataStructures13SegmentedLineV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Bound"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":">"}],"url":"\/documentation\/unicodedatastructures\/segmentedline\/mapvalues(_:)"},"doc://com.karwa.WebURL/documentation/UnicodeDataStructures/SegmentedLine":{"navigatorTitle":[{"kind":"identifier","text":"SegmentedLine"}],"kind":"symbol","identifier":"doc:\/\/com.karwa.WebURL\/documentation\/UnicodeDataStructures\/SegmentedLine","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"SegmentedLine"}],"role":"symbol","title":"SegmentedLine","abstract":[{"type":"text","text":"A "},{"code":"SegmentedLine","type":"codeVoice"},{"type":"text","text":" is a one-dimensional space, where every location is assigned a value."}],"url":"\/documentation\/unicodedatastructures\/segmentedline","type":"topic"},"doc://com.karwa.WebURL/documentation/UnicodeDataStructures":{"kind":"symbol","identifier":"doc:\/\/com.karwa.WebURL\/documentation\/UnicodeDataStructures","role":"collection","title":"UnicodeDataStructures","abstract":[],"url":"\/documentation\/unicodedatastructures","type":"topic"},"doc://com.karwa.WebURL/documentation/UnicodeDataStructures/SegmentedLine/combineSegments()":{"abstract":[{"type":"text","text":"Merges segments of consecutive equal elements."}],"kind":"symbol","conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"code":"Bound","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"Comparable","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"Value","type":"codeVoice"},{"type":"text","text":" conforms to "},{"code":"Equatable","type":"codeVoice"},{"type":"text","text":"."}]},"identifier":"doc:\/\/com.karwa.WebURL\/documentation\/UnicodeDataStructures\/SegmentedLine\/combineSegments()","title":"combineSegments()","role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"combineSegments"},{"kind":"text","text":"()"}],"url":"\/documentation\/unicodedatastructures\/segmentedline\/combinesegments()"}}}