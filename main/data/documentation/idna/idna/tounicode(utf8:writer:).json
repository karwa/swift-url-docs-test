{"kind":"symbol","sections":[],"hierarchy":{"paths":[["doc:\/\/com.karwa.WebURL\/documentation\/IDNA","doc:\/\/com.karwa.WebURL\/documentation\/IDNA\/IDNA"]]},"identifier":{"url":"doc:\/\/com.karwa.WebURL\/documentation\/IDNA\/IDNA\/toUnicode(utf8:writer:)","interfaceLanguage":"swift"},"seeAlsoSections":[{"generated":true,"identifiers":["doc:\/\/com.karwa.WebURL\/documentation\/IDNA\/IDNA\/toASCII(utf8:beStrict:writer:)"],"title":"IDNA Compatibility Processing"}],"schemaVersion":{"major":0,"patch":0,"minor":3},"metadata":{"extendedModule":"IDNA","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"toUnicode"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Source"},{"kind":"text","text":">("},{"kind":"externalParam","text":"utf8"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Source"},{"kind":"text","text":", "},{"kind":"externalParam","text":"writer"},{"kind":"text","text":": ("},{"preciseIdentifier":"s:s25AnyRandomAccessCollectionV","kind":"typeIdentifier","text":"AnyRandomAccessCollection"},{"kind":"text","text":"<"},{"preciseIdentifier":"s:s7UnicodeO","kind":"typeIdentifier","text":"Unicode"},{"kind":"text","text":"."},{"preciseIdentifier":"s:s7UnicodeO6ScalarV","kind":"typeIdentifier","text":"Scalar"},{"kind":"text","text":">, "},{"preciseIdentifier":"s:Sb","kind":"typeIdentifier","text":"Bool"},{"kind":"text","text":") -> "},{"preciseIdentifier":"s:Sb","kind":"typeIdentifier","text":"Bool"},{"kind":"text","text":") -> "},{"preciseIdentifier":"s:Sb","kind":"typeIdentifier","text":"Bool"}],"roleHeading":"Type Method","externalID":"s:4IDNAAAO9toUnicode4utf86writerSbx_Sbs25AnyRandomAccessCollectionVys0C0O6ScalarVG_SbtXEtSlRzs5UInt8V7ElementRtzlFZ","symbolKind":"method","title":"toUnicode(utf8:writer:)","role":"symbol","modules":[{"name":"IDNA"}]},"abstract":[{"text":"Converts a domain to its canonical Unicode form.","type":"text"}],"primaryContentSections":[{"declarations":[{"platforms":["Linux"],"tokens":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"toUnicode"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Source"},{"kind":"text","text":">("},{"kind":"externalParam","text":"utf8"},{"kind":"text","text":" "},{"kind":"internalParam","text":"source"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Source"},{"kind":"text","text":", "},{"kind":"externalParam","text":"writer"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"AnyRandomAccessCollection","preciseIdentifier":"s:s25AnyRandomAccessCollectionV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Unicode","preciseIdentifier":"s:s7UnicodeO"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Scalar","preciseIdentifier":"s:s7UnicodeO6ScalarV"},{"kind":"text","text":">, "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"kind":"text","text":" "},{"kind":"keyword","text":"where"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Source"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","text":"Collection","preciseIdentifier":"s:Sl"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Source"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":" == "},{"kind":"typeIdentifier","text":"UInt8","preciseIdentifier":"s:s5UInt8V"}],"languages":["swift"]}],"kind":"declarations"},{"kind":"content","content":[{"level":2,"type":"heading","text":"Return Value","anchor":"return-value"},{"type":"paragraph","inlineContent":[{"text":"Whether or not the operation was successful.","type":"text"},{"text":" ","type":"text"},{"text":"If ","type":"text"},{"type":"codeVoice","code":"false"},{"text":", the given domain is not valid, and any data previously yielded to ","type":"text"},{"type":"codeVoice","code":"writer"},{"text":" ","type":"text"},{"text":"should be discarded.","type":"text"}]}]},{"kind":"parameters","parameters":[{"name":"utf8","content":[{"inlineContent":[{"text":"A domain in either Unicode or ASCII form, expressed as a Collection of UTF-8 code-units.","type":"text"}],"type":"paragraph"}]},{"name":"writer","content":[{"inlineContent":[{"type":"text","text":"A closure which receives the domain labels emitted by this function."},{"type":"text","text":" "},{"type":"text","text":"The labels should be written in the order they are received, and if "},{"code":"needsTrailingDot","type":"codeVoice"},{"type":"text","text":" is true,"},{"type":"text","text":" "},{"type":"text","text":"the label should be followed by U+002E FULL STOP (‚Äù.‚Äù). Processing continues for as long as"},{"type":"text","text":" "},{"type":"text","text":"the closure returns "},{"code":"true","type":"codeVoice"},{"type":"text","text":"; meaning that it may perform validation, and may signal that processing"},{"type":"text","text":" "},{"type":"text","text":"should stop by returning "},{"code":"false","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"}]}]},{"kind":"content","content":[{"anchor":"discussion","text":"Discussion","type":"heading","level":2},{"inlineContent":[{"text":"The domain may be given in ASCII or Unicode form. This function will perform all required","type":"text"},{"text":" ","type":"text"},{"text":"compatibility processing, including mapping and case-folding, normalization, Punycode decoding, etc.","type":"text"},{"text":" ","type":"text"},{"text":"Finally, each label and the entire domain are validated, producing a nice, canonicalized, Unicode-form domain.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"This function is idempotent, so if it is applied to a domain that is already in canonical Unicode form,"},{"type":"text","text":" "},{"type":"text","text":"it just produces the same value, unchanged."}],"type":"paragraph"},{"syntax":"swift","code":["\/\/ ASCII domains.","toUnicode(\"example.com\")  \/\/ ‚úÖ \"example.com\"","","\/\/ Punycode.","toUnicode(\"xn--weswift-z98d\")        \/\/ ‚úÖ \"we‚ù§Ô∏èswift\"","toUnicode(\"api.xn--6qqa088eba.com\")  \/\/ ‚úÖ \"api.‰Ω†Â•Ω‰Ω†Â•Ω.com\"","","\/\/ Idempotent.","toUnicode(\"api.‰Ω†Â•Ω‰Ω†Â•Ω.com\")  \/\/ ‚úÖ \"api.‰Ω†Â•Ω‰Ω†Â•Ω.com\"","","\/\/ Normalizes Unicode domains.","toUnicode(\"www.caf\\u{00E9}.fr\")   \/\/ ‚úÖ \"www.caf√©.fr\" (\"caf\\u{00E9}\")","toUnicode(\"www.cafe\\u{0301}.fr\")  \/\/ ‚úÖ \"www.caf√©.fr\" (\"caf\\u{00E9}\")","toUnicode(\"www.xn--caf-dma.fr\")   \/\/ ‚úÖ \"www.caf√©.fr\" (\"caf\\u{00E9}\")"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"Validation ensures that domains are NFC normalized and case-folded, and enforces some rules"},{"type":"text","text":" "},{"type":"text","text":"with regards to use of joiners and bidirectional text."}],"type":"paragraph"},{"syntax":"swift","code":["\/\/ Zero-width joiners and non-joiners are only allowed in certain contexts.","let notApple = \"a\\u{200C}pple.com\"     \/\/ ü•∏ Hey! There's a zero-width non-joiner hiding there!","print(notApple)           \"a‚Äåpple.com\"  \/\/ To a human, it looks like \"apple.com\"","print(notApple == \"apple.com\")  false  \/\/ A computer knows it ISN'T \"apple.com\"","toUnicode(\"a\\u{200C}pple.com\")  <nil>  \/\/ ‚ùé Not a valid IDN!","","\/\/ \"xn--cafe-yvc\" is how you would Punycode \"cafe\\u{0301}\" (the non-NFC \"caf√©\").","\/\/ This ensures there is only one \"caf√©.fr\".","toUnicode(\"xn--caf-dma.fr\")   \/\/ ‚úÖ \"caf√©.fr\" (\"caf\\u{00E9}\")","toUnicode(\"xn--cafe-yvc.fr\")  \/\/ ‚ùé <nil> - Not a valid IDN!"],"type":"codeListing"},{"anchor":"Rendering-Domains","text":"Rendering Domains","type":"heading","level":2},{"inlineContent":[{"type":"text","text":"Domains are often displayed in a context which establishes authority. For example, a person"},{"type":"text","text":" "},{"type":"text","text":"viewing an email from "},{"type":"codeVoice","code":"\"support@apple.com\""},{"type":"text","text":" expects the sender to represent Apple Inc."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Displaying Unicode text in such contexts should be considered carefully. It is possible for certain"},{"type":"text","text":" "},{"type":"text","text":"characters to appear visually similar, or even identically, to other characters - to the extent that"},{"type":"text","text":" "},{"type":"text","text":"readers may be mislead about the authority being established. "},{"identifier":"https:\/\/www.unicode.org\/reports\/tr36\/","type":"reference","isActive":true},{"type":"text","text":" "},{"type":"text","text":"and "},{"identifier":"https:\/\/www.unicode.org\/reports\/tr39\/","type":"reference","isActive":true},{"type":"text","text":" explain these issues in more detail, with examples."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Applications can decide how this applies to them; perhaps they can consider which scripts the user is familiar"},{"type":"text","text":" "},{"type":"text","text":"with, or perhaps they will render potentially-confusable labels with a different font or other UI marker."},{"type":"text","text":" "},{"type":"text","text":"Alternatively, they might render confusable labels as Punycode, although note that this can be counter-productive"},{"type":"text","text":" "},{"type":"text","text":"(see UTR36). It‚Äôs a bit of an open question: how can we present text that is truly unambiguous, such that you"},{"type":"text","text":" "},{"type":"text","text":"can trust its authority? The best answer we have so far is: do what makes sense in your context ü§∑‚Äç‚ôÇÔ∏è."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"To facilitate high-level Unicode processing, this function takes a callback closure which visits each label"},{"type":"text","text":" "},{"type":"text","text":"of the domain. Labels are provided to the closure as a buffer of canonicalized Unicode scalars"},{"type":"text","text":" "},{"type":"text","text":"(i.e. NFC normalized, case-folded, and validated). The closure can then decide how it wishes to present"},{"type":"text","text":" "},{"type":"text","text":"the Unicode label for display, or which flags it wishes to remember about this domain."}],"type":"paragraph"},{"inlineContent":[{"text":"Here‚Äôs how we might implement that. Let‚Äôs say we have a function, ","type":"text"},{"code":"DecidePresentationStrategyForLabel","type":"codeVoice"},{"text":",","type":"text"},{"text":" ","type":"text"},{"text":"which decides the best way to render a domain label in our UI, given our user‚Äôs locale preferences","type":"text"},{"text":" ","type":"text"},{"text":"and other heuristics:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["func DecidePresentationStrategyForLabel(","  _ label: some RandomAccessCollection<Unicode.Scalar>",") -> PresentationStrategy {","  \/\/ Your logic here...","}","","func RenderDomain(_ input: String) -> String? {","  var result = \"\"","  let success = IDNA.toUnicode(utf8: input.utf8) { label, needsTrailingDot in","    switch DecidePresentationStrategyForLabel(label) {","    \/\/ Unicode presentation.","    case .unicode:","      result.unicodeScalars += label","","    \/\/ Punycode can also be a valid way to write this label.","    \/\/ Note that it can _also_ be ambiguous, so use with caution!","    case .punycode:","      Punycode.encode(label) { ascii in","        result.unicodeScalars.append(Unicode.Scalar(ascii))","      }","","    \/\/ Other context-appropriate responses, beyond Punycode...","    case .confusableWithKnownBrand:","      \/* Use AttributedString to force a certain font\/spacing\/color? *\/","      \/* Add an extra warning for certain actions, like making a purchase\/entering a password? *\/","    }","","    if needsTrailingDot { result += \".\" }","    return true","  }","  return success ? result : nil","}"],"type":"codeListing"},{"inlineContent":[{"text":"And then we would use that function to decide how to display the domain:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["RenderDomain(\"x.example.com\")","\/\/ ‚úÖ \"x.example.com\" (ASCII)","","RenderDomain(\"shop.xn--igbi0gl.com\")","\/\/ ‚úÖ \"shop.ÿ£ŸáŸÑÿß.com\"","","RenderDomain(\"√•pple.com\")","\/\/ ‚úÖ \"xn--pple-poa.com\", NOT \"√•pple.com\"","","RenderDomain(\"xn--citibank.com\")","\/\/ ‚úÖ \"Â≤çÂ≤äÂ≤äÂ≤ÖÂ≤âÂ≤é.com\" NOT \"xn--citibank.com\""],"type":"codeListing"},{"inlineContent":[{"text":"If an error occurs, the function will stop processing the domain and return ","type":"text"},{"code":"false","type":"codeVoice"},{"text":",","type":"text"},{"text":" ","type":"text"},{"text":"and any previously-written data should be discarded. The callback closure can also","type":"text"},{"text":" ","type":"text"},{"text":"signal a validation error and halt further processing by returning ","type":"text"},{"code":"false","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"},{"anchor":"UTS46-Parameters","text":"UTS46 Parameters","type":"heading","level":3},{"inlineContent":[{"text":"This function implements ","type":"text"},{"code":"\"domain to Unicode\"","type":"codeVoice"},{"text":" as defined by the ","type":"text"},{"isActive":true,"type":"reference","identifier":"https:\/\/url.spec.whatwg.org\/#concept-domain-to-unicode"},{"text":".","type":"text"},{"text":" ","type":"text"},{"text":"It is the same as the ","type":"text"},{"code":"ToUnicode","type":"codeVoice"},{"text":" function defined by ","type":"text"},{"isActive":true,"type":"reference","identifier":"https:\/\/www.unicode.org\/reports\/tr46\/#ToUnicode"},{"text":",","type":"text"},{"text":" ","type":"text"},{"text":"with parameters bound as follows:","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"CheckHyphens"},{"type":"text","text":" is "},{"type":"codeVoice","code":"false"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"CheckBidi"},{"text":" is ","type":"text"},{"type":"codeVoice","code":"true"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"CheckJoiners"},{"type":"text","text":" is "},{"type":"codeVoice","code":"true"}]}]},{"content":[{"inlineContent":[{"code":"UseSTD3ASCIIRules","type":"codeVoice"},{"text":" is ","type":"text"},{"code":"false","type":"codeVoice"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"Transitional_Processing"},{"text":" is ","type":"text"},{"type":"codeVoice","code":"false"}],"type":"paragraph"}]}],"type":"unorderedList"}]}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/idna\/idna\/tounicode(utf8:writer:)"]}],"references":{"doc://com.karwa.WebURL/documentation/IDNA/IDNA":{"url":"\/documentation\/idna\/idna","abstract":[{"type":"text","text":"Functions relating to Internationalizing Domain Names for Applications (IDNA) compatibility processing."}],"role":"symbol","kind":"symbol","identifier":"doc:\/\/com.karwa.WebURL\/documentation\/IDNA\/IDNA","navigatorTitle":[{"text":"IDNA","kind":"identifier"}],"type":"topic","title":"IDNA","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"IDNA","kind":"identifier"}]},"doc://com.karwa.WebURL/documentation/IDNA":{"url":"\/documentation\/idna","abstract":[],"role":"collection","kind":"symbol","identifier":"doc:\/\/com.karwa.WebURL\/documentation\/IDNA","type":"topic","title":"IDNA"},"https://www.unicode.org/reports/tr46/#ToUnicode":{"url":"https:\/\/www.unicode.org\/reports\/tr46\/#ToUnicode","identifier":"https:\/\/www.unicode.org\/reports\/tr46\/#ToUnicode","type":"link","title":"Unicode Technical Standard #46","titleInlineContent":[{"type":"text","text":"Unicode Technical Standard #46"}]},"https://url.spec.whatwg.org/#concept-domain-to-unicode":{"url":"https:\/\/url.spec.whatwg.org\/#concept-domain-to-unicode","identifier":"https:\/\/url.spec.whatwg.org\/#concept-domain-to-unicode","type":"link","title":"WHATWG URL Standard","titleInlineContent":[{"type":"text","text":"WHATWG URL Standard"}]},"doc://com.karwa.WebURL/documentation/IDNA/IDNA/toASCII(utf8:beStrict:writer:)":{"url":"\/documentation\/idna\/idna\/toascii(utf8:bestrict:writer:)","abstract":[{"type":"text","text":"Converts a domain to its canonical ASCII form."}],"role":"symbol","kind":"symbol","identifier":"doc:\/\/com.karwa.WebURL\/documentation\/IDNA\/IDNA\/toASCII(utf8:beStrict:writer:)","type":"topic","title":"toASCII(utf8:beStrict:writer:)","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"toASCII","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"Source"},{"kind":"text","text":">("},{"kind":"externalParam","text":"utf8"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Source"},{"kind":"text","text":", "},{"kind":"externalParam","text":"beStrict"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Sb","kind":"typeIdentifier","text":"Bool"},{"kind":"text","text":", "},{"kind":"externalParam","text":"writer"},{"kind":"text","text":": ("},{"preciseIdentifier":"s:s5UInt8V","kind":"typeIdentifier","text":"UInt8"},{"kind":"text","text":") -> "},{"preciseIdentifier":"s:s4Voida","kind":"typeIdentifier","text":"Void"},{"kind":"text","text":") -> "},{"preciseIdentifier":"s:Sb","kind":"typeIdentifier","text":"Bool"}]},"https://www.unicode.org/reports/tr39/":{"url":"https:\/\/www.unicode.org\/reports\/tr39\/","identifier":"https:\/\/www.unicode.org\/reports\/tr39\/","type":"link","title":"Unicode Technical Standard #39","titleInlineContent":[{"type":"text","text":"Unicode Technical Standard #39"}]},"doc://com.karwa.WebURL/documentation/IDNA/IDNA/toUnicode(utf8:writer:)":{"url":"\/documentation\/idna\/idna\/tounicode(utf8:writer:)","abstract":[{"type":"text","text":"Converts a domain to its canonical Unicode form."}],"role":"symbol","kind":"symbol","identifier":"doc:\/\/com.karwa.WebURL\/documentation\/IDNA\/IDNA\/toUnicode(utf8:writer:)","type":"topic","title":"toUnicode(utf8:writer:)","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"toUnicode","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"Source"},{"kind":"text","text":">("},{"kind":"externalParam","text":"utf8"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Source"},{"kind":"text","text":", "},{"kind":"externalParam","text":"writer"},{"kind":"text","text":": ("},{"preciseIdentifier":"s:s25AnyRandomAccessCollectionV","kind":"typeIdentifier","text":"AnyRandomAccessCollection"},{"kind":"text","text":"<"},{"preciseIdentifier":"s:s7UnicodeO","kind":"typeIdentifier","text":"Unicode"},{"kind":"text","text":"."},{"preciseIdentifier":"s:s7UnicodeO6ScalarV","kind":"typeIdentifier","text":"Scalar"},{"kind":"text","text":">, "},{"preciseIdentifier":"s:Sb","kind":"typeIdentifier","text":"Bool"},{"kind":"text","text":") -> "},{"preciseIdentifier":"s:Sb","kind":"typeIdentifier","text":"Bool"},{"kind":"text","text":") -> "},{"preciseIdentifier":"s:Sb","kind":"typeIdentifier","text":"Bool"}]},"https://www.unicode.org/reports/tr36/":{"url":"https:\/\/www.unicode.org\/reports\/tr36\/","identifier":"https:\/\/www.unicode.org\/reports\/tr36\/","type":"link","title":"Unicode Technical Report #36","titleInlineContent":[{"type":"text","text":"Unicode Technical Report #36"}]}}}