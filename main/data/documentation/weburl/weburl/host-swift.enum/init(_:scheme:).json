{"metadata":{"extendedModule":"WebURL","title":"init(_:scheme:)","roleHeading":"Initializer","symbolKind":"init","externalID":"s:6WebURLAAV4HostO_6schemeADSgx_SStcSyRzlufc","role":"symbol","modules":[{"name":"WebURL"}],"fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"?<"},{"kind":"genericParameter","text":"StringType"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"StringType"},{"kind":"text","text":", "},{"text":"scheme","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:SS","text":"String","kind":"typeIdentifier"},{"text":")","kind":"text"}]},"sections":[],"kind":"symbol","identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.karwa.WebURL\/documentation\/WebURL\/WebURL\/Host-swift.enum\/init(_:scheme:)"},"seeAlsoSections":[{"title":"Parsing a Host from a String and Context","identifiers":["doc:\/\/com.karwa.WebURL\/documentation\/WebURL\/WebURL\/Host-swift.enum\/init(utf8:scheme:)"],"generated":true}],"hierarchy":{"paths":[["doc:\/\/com.karwa.WebURL\/documentation\/WebURL","doc:\/\/com.karwa.WebURL\/documentation\/WebURL\/WebURL","doc:\/\/com.karwa.WebURL\/documentation\/WebURL\/WebURL\/Host-swift.enum"]]},"abstract":[{"text":"Parses a hostname in the context of a given URL scheme.","type":"text"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/weburl\/weburl\/host-swift.enum\/init(_:scheme:)"]}],"schemaVersion":{"minor":3,"major":0,"patch":0},"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["Linux"],"languages":["swift"],"tokens":[{"kind":"keyword","text":"init"},{"kind":"text","text":"?<"},{"kind":"genericParameter","text":"StringType"},{"kind":"text","text":">("},{"kind":"externalParam","text":"_"},{"kind":"text","text":" "},{"kind":"internalParam","text":"string"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"StringType"},{"kind":"text","text":", "},{"kind":"externalParam","text":"scheme"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":") "},{"kind":"keyword","text":"where"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"StringType"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","text":"StringProtocol","preciseIdentifier":"s:Sy"}]}]},{"kind":"parameters","parameters":[{"name":"string","content":[{"inlineContent":[{"type":"text","text":"The string to parse."}],"type":"paragraph"}]},{"name":"scheme","content":[{"inlineContent":[{"type":"text","text":"The URL scheme which provides the context for interpreting the given string."}],"type":"paragraph"}]}]},{"content":[{"level":2,"type":"heading","text":"Discussion","anchor":"discussion"},{"inlineContent":[{"text":"In general, the URL Standard considers hosts to simply be opaque strings;","type":"text"},{"text":" ","type":"text"},{"text":"for example, in the URL ","type":"text"},{"code":"redis:\/\/some_host\/42","type":"codeVoice"},{"text":", the way in which ","type":"text"},{"code":"\"some_host\"","type":"codeVoice"},{"text":" is interpreted","type":"text"},{"text":" ","type":"text"},{"text":"is an implementation detail of the ","type":"text"},{"code":"\"redis:\"","type":"codeVoice"},{"text":" URL scheme and request library being used -","type":"text"},{"text":" ","type":"text"},{"text":"it might be some kind of network address, a path to a local file, a device\/application ID, etc.","type":"text"},{"text":" ","type":"text"},{"text":"It is up to the request library to parse the identifier and decide which kind of host it is,","type":"text"},{"text":" ","type":"text"},{"text":"or if it is even valid.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"However, a few URL schemes (such as ","type":"text"},{"code":"\"http(s):\"","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"\"file:\"","type":"codeVoice"},{"text":") are known to the URL Standard,","type":"text"},{"text":" ","type":"text"},{"text":"and it is necessary that all implementations interpret their hosts as specific, supported network addresses.","type":"text"},{"text":" ","type":"text"},{"text":"For example, hostnames containing Unicode characters must be converted to ASCII using","type":"text"},{"text":" ","type":"text"},{"text":"a special compatibility processing known as IDNA, and certain numerical hostnames (like ","type":"text"},{"code":"\"127.0.0.1\"","type":"codeVoice"},{"text":")","type":"text"},{"text":" ","type":"text"},{"text":"are interpreted as IPv4 addresses.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"This initializer allows you to understand, validate, and normalize hostnames"},{"type":"text","text":" "},{"type":"text","text":"using the "},{"type":"reference","isActive":true,"identifier":"https:\/\/url.spec.whatwg.org\/#concept-host-parser"},{"type":"text","text":" from the URL Standard, in the context of the given "},{"type":"codeVoice","code":"scheme"},{"type":"text","text":"."}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["\/\/ For custom URL schemes (e.g. redis:\/mongodb:\/etc URLs),","\/\/ the URL Standard generally considers hostnames to be opaque.","\/\/ Request libraries have to parse the hostname themselves","\/\/ to figure out what it means.","","WebURL.Host(\"EXAMPLE.com\", scheme: \"foo\")","\/\/ üòê .opaque, \"EXAMPLE.com\"","","WebURL.Host(\"abc.ÿ£ŸáŸÑÿß.com\", scheme: \"foo\")","\/\/ üòï .opaque, \"abc.%D8%A3%D9%87%D9%84%D8%A7.com\"","","WebURL.Host(\"192.168.0.1\", scheme: \"foo\")","\/\/ ü§® .opaque, \"192.168.0.1\"","","\/\/ Matching the behavior of HTTP URLs can be very useful -","\/\/ especially as it comes with Unicode domain names (IDNA)","\/\/ and IPv4 support.","","WebURL.Host(\"EXAMPLE.com\", scheme: \"http\")","\/\/ üòç .domain, \"example.com\"","","WebURL.Host(\"abc.ÿ£ŸáŸÑÿß.com\", scheme: \"http\")","\/\/ ü§© .domain, \"abc.xn--igbi0gl.com\"","","WebURL.Host(\"192.168.0.1\", scheme: \"http\")","\/\/ ü•≥ .ipv4Address, IPv4Address { 192.168.0.1 }"]},{"inlineContent":[{"text":"If the host is not valid for the given scheme, this initializer fails and returns ","type":"text"},{"code":"nil","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"The ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.karwa.WebURL\/documentation\/WebURL\/WebURL\/Host-swift.enum"},{"text":" documentation has more information about","type":"text"},{"text":" ","type":"text"},{"text":"which kinds of hosts are supported for each ","type":"text"},{"code":"scheme","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"}],"kind":"content"}],"references":{"doc://com.karwa.WebURL/documentation/WebURL":{"role":"collection","identifier":"doc:\/\/com.karwa.WebURL\/documentation\/WebURL","type":"topic","url":"\/documentation\/weburl","abstract":[{"text":"A new URL type for Swift.","type":"text"}],"title":"WebURL","kind":"symbol"},"https://url.spec.whatwg.org/#concept-host-parser":{"type":"link","title":"host parser","url":"https:\/\/url.spec.whatwg.org\/#concept-host-parser","identifier":"https:\/\/url.spec.whatwg.org\/#concept-host-parser","titleInlineContent":[{"text":"host parser","type":"text"}]},"doc://com.karwa.WebURL/documentation/WebURL/WebURL":{"role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"WebURL"}],"identifier":"doc:\/\/com.karwa.WebURL\/documentation\/WebURL\/WebURL","type":"topic","url":"\/documentation\/weburl\/weburl","abstract":[{"text":"A Uniform Resource Locator (URL) is a universal identifier,","type":"text"},{"text":" ","type":"text"},{"text":"which often describes the location of a resource.","type":"text"}],"title":"WebURL","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"WebURL"}]},"doc://com.karwa.WebURL/documentation/WebURL/WebURL/Host-swift.enum":{"type":"topic","role":"symbol","navigatorTitle":[{"text":"Host","kind":"identifier"}],"abstract":[{"text":"A host, as interpreted by the URL Standard. A host is a network address or opaque identifier.","type":"text"}],"kind":"symbol","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Host","kind":"identifier"}],"url":"\/documentation\/weburl\/weburl\/host-swift.enum","identifier":"doc:\/\/com.karwa.WebURL\/documentation\/WebURL\/WebURL\/Host-swift.enum","title":"WebURL.Host"},"doc://com.karwa.WebURL/documentation/WebURL/WebURL/Host-swift.enum/init(_:scheme:)":{"type":"topic","role":"symbol","abstract":[{"text":"Parses a hostname in the context of a given URL scheme.","type":"text"}],"kind":"symbol","fragments":[{"text":"init","kind":"identifier"},{"text":"?<","kind":"text"},{"text":"StringType","kind":"genericParameter"},{"text":">(","kind":"text"},{"kind":"typeIdentifier","text":"StringType"},{"kind":"text","text":", "},{"kind":"externalParam","text":"scheme"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":")"}],"url":"\/documentation\/weburl\/weburl\/host-swift.enum\/init(_:scheme:)","identifier":"doc:\/\/com.karwa.WebURL\/documentation\/WebURL\/WebURL\/Host-swift.enum\/init(_:scheme:)","title":"init(_:scheme:)"},"doc://com.karwa.WebURL/documentation/WebURL/WebURL/Host-swift.enum/init(utf8:scheme:)":{"title":"init(utf8:scheme:)","fragments":[{"text":"init","kind":"identifier"},{"text":"?<","kind":"text"},{"kind":"genericParameter","text":"UTF8Bytes"},{"kind":"text","text":">("},{"kind":"externalParam","text":"utf8"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UTF8Bytes"},{"kind":"text","text":", "},{"kind":"externalParam","text":"scheme"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:SS","text":"String"},{"kind":"text","text":")"}],"identifier":"doc:\/\/com.karwa.WebURL\/documentation\/WebURL\/WebURL\/Host-swift.enum\/init(utf8:scheme:)","kind":"symbol","type":"topic","abstract":[{"type":"text","text":"Parses a hostname string from a collection of UTF-8 code-units."}],"url":"\/documentation\/weburl\/weburl\/host-swift.enum\/init(utf8:scheme:)","role":"symbol"}}}