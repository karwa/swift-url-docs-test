{"primaryContentSections":[{"declarations":[{"languages":["swift"],"platforms":["Linux"],"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"serialized"},{"kind":"text","text":"("},{"kind":"externalParam","text":"excludingFragment"},{"kind":"text","text":": "},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"},{"text":" = false) -> ","kind":"text"},{"text":"String","kind":"typeIdentifier","preciseIdentifier":"s:SS"}]}],"kind":"declarations"},{"parameters":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Whether the fragment should be omitted from the result. The default is ","type":"text"},{"code":"false","type":"codeVoice"},{"text":".","type":"text"}]}],"name":"excludingFragment"}],"kind":"parameters"},{"content":[{"anchor":"discussion","level":2,"type":"heading","text":"Discussion"},{"type":"paragraph","inlineContent":[{"text":"The serialization of a URL is defined by the URL Standard. This is the same serialization as is used","type":"text"},{"text":" ","type":"text"},{"text":"when initializing a String from a ","type":"text"},{"code":"WebURL","type":"codeVoice"},{"text":" value, printing a ","type":"text"},{"code":"WebURL","type":"codeVoice"},{"text":", or encoding a ","type":"text"},{"code":"WebURL","type":"codeVoice"},{"text":" ","type":"text"},{"text":"using ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":".","type":"text"}]},{"code":["let url: WebURL = ...","url.serialized()","String(url)      \/\/ Same as above.","print(url)       \/\/ Same as print(url.serialized())"],"syntax":"swift","type":"codeListing"},{"anchor":"Idempotence","level":3,"type":"heading","text":"Idempotence"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The URL Standard ensures that the combination of parser, serializer, and API, guarantee idempotence."},{"type":"text","text":" "},{"type":"text","text":"This means that any "},{"code":"WebURL","type":"codeVoice"},{"type":"text","text":" value may be converted to a string (for example, in a log file or JSON)"},{"type":"text","text":" "},{"type":"text","text":"and re-parsed, and the result is guaranteed to be identical to the original "},{"code":"WebURL","type":"codeVoice"},{"type":"text","text":"."}]},{"code":["func takesURLAsString(_ urlString: String) {","  \/\/ ✅ If `urlString` is a serialized WebURL, this is guaranteed","  \/\/    to reconstruct the value exactly.","  let reparsed = WebURL(urlString)","  assert(reparsed.serialized() == urlString)","}"],"syntax":"swift","type":"codeListing"},{"type":"aside","content":[{"inlineContent":[{"text":"","type":"text"},{"text":" ","type":"text"},{"text":"In Swift terms, this means that WebURL is ","type":"text"},{"code":"LosslessStringConvertible","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"}],"style":"tip"},{"type":"aside","content":[{"inlineContent":[{"text":"","type":"text"},{"text":" ","type":"text"},{"text":"This may seem like an obvious feature, but not all URL libraries offer it.","type":"text"},{"text":" ","type":"text"},{"text":"Some libraries require special ","type":"text"},{"type":"codeVoice","code":"normalize()"},{"text":" functions, or that you enable a ‘relaxed’ parsing mode,","type":"text"},{"text":" ","type":"text"},{"text":"and some URL types have additional state which isn’t part of the serialization at all!","type":"text"}],"type":"paragraph"}],"style":"note"}],"kind":"content"}],"metadata":{"symbolKind":"method","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"serialized","kind":"identifier"},{"text":"(","kind":"text"},{"text":"excludingFragment","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Sb","text":"Bool","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:SS","text":"String","kind":"typeIdentifier"}],"extendedModule":"WebURL","externalID":"s:6WebURLAAV10serialized17excludingFragmentSSSb_tF","roleHeading":"Instance Method","role":"symbol","modules":[{"name":"WebURL"}],"title":"serialized(excludingFragment:)"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/weburl\/weburl\/serialized(excludingfragment:)"]}],"sections":[],"hierarchy":{"paths":[["doc:\/\/com.karwa.WebURL\/documentation\/WebURL","doc:\/\/com.karwa.WebURL\/documentation\/WebURL\/WebURL"]]},"seeAlsoSections":[{"identifiers":["doc:\/\/com.karwa.WebURL\/documentation\/WebURL\/WebURL\/init(_:)"],"title":"Related Documentation"}],"abstract":[{"text":"Returns the string representation of this URL.","type":"text"}],"kind":"symbol","identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.karwa.WebURL\/documentation\/WebURL\/WebURL\/serialized(excludingFragment:)"},"schemaVersion":{"major":0,"minor":1,"patch":0},"references":{"doc://com.karwa.WebURL/documentation/WebURL/WebURL":{"role":"symbol","abstract":[{"text":"A Uniform Resource Locator (URL) is a universal identifier,","type":"text"},{"text":" ","type":"text"},{"text":"which often describes the location of a resource.","type":"text"}],"url":"\/documentation\/weburl\/weburl","kind":"symbol","identifier":"doc:\/\/com.karwa.WebURL\/documentation\/WebURL\/WebURL","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"WebURL","kind":"identifier"}],"type":"topic","navigatorTitle":[{"text":"WebURL","kind":"identifier"}],"title":"WebURL"},"doc://com.karwa.WebURL/documentation/WebURL/WebURL/init(_:)":{"url":"\/documentation\/weburl\/weburl\/init(_:)","title":"init(_:)","abstract":[{"text":"Parses a URL string.","type":"text"}],"role":"symbol","type":"topic","identifier":"doc:\/\/com.karwa.WebURL\/documentation\/WebURL\/WebURL\/init(_:)","kind":"symbol","fragments":[{"text":"init","kind":"identifier"},{"text":"?<","kind":"text"},{"text":"StringType","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"StringType","kind":"typeIdentifier"},{"text":")","kind":"text"}]},"doc://com.karwa.WebURL/documentation/WebURL":{"role":"collection","abstract":[{"text":"A new URL type for Swift.","type":"text"}],"url":"\/documentation\/weburl","kind":"symbol","identifier":"doc:\/\/com.karwa.WebURL\/documentation\/WebURL","type":"topic","title":"WebURL"},"doc://com.karwa.WebURL/documentation/WebURL/WebURL/serialized(excludingFragment:)":{"kind":"symbol","abstract":[{"type":"text","text":"Returns the string representation of this URL."}],"url":"\/documentation\/weburl\/weburl\/serialized(excludingfragment:)","role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"serialized"},{"kind":"text","text":"("},{"kind":"externalParam","text":"excludingFragment"},{"text":": ","kind":"text"},{"text":"Bool","preciseIdentifier":"s:Sb","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"String","preciseIdentifier":"s:SS","kind":"typeIdentifier"}],"type":"topic","title":"serialized(excludingFragment:)","identifier":"doc:\/\/com.karwa.WebURL\/documentation\/WebURL\/WebURL\/serialized(excludingFragment:)"}}}